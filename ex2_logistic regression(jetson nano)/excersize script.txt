1. download anaconda
- wget https://repo.anaconda.com/archive/Anaconda3-2024.10-1-Linux-aarch64.sh

2. Copy the anaconda installer to the Jetson nano/Raspberry PI via scp
- scp Anaconda3-2024.10-1-Linux-aarch64.sh nano@162.158.55.1:~

3. Install Anaconda. It is highly recommended to install via terminal by just executing the downloaded file. 

gidong@DESKTOP-UBH17S5:~/ex1$ ssh nano@192.168.55.1
nano@192.168.55.1's password:
Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.9.253-tegra aarch64)
nano@nano:~$ ls
Anaconda3-2024.10-1-Linux-aarch64.sh  Desktop  examples.desktop
nano@nano:~$ chmod +x Anaconda3-2024.10-1-Linux-aarch64.sh
nano@nano:~$ ./Anaconda3-2024.10-1-Linux-aarch64.sh
nano@nano:~$ source anaconda3/bin/activate
(base) nano@nano:~$ conda --version
conda 24.9.2
(base) nano@nano:~$ python

4. Using [scikit-learn](https://scikit-learn.org), train a logistic regression model on synthetic dataset using the function [`sklearn.datasets.make_moons`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_moons.html#sklearn.datasets.make_moons) with `num_samples 20 000` and `seed 493204` 

(base) nano@nano:~$ python
Python 3.12.7 | packaged by Anaconda, Inc. | (main, Oct  4 2024, 13:17:02) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from sklearn.datasets import make_moons
>>> from sklearn.linear_model import LogisticRegression
>>> import pickle
>>>
>>> X, y = make_moons(n_samples=20000, noise=0.2, random_state=493204)
>>> model = LogisticRegression()
>>> model.fit(X,y)
LogisticRegression()
>>>
>>> with open('ex2.pkl','wb') as f :
...     pickle.dump(model,f)
...
>>>
(base) nano@nano:~$ ls
anaconda3  Anaconda3-2024.10-1-Linux-aarch64.sh  Desktop  ex2.pkl  examples.desktop

5. Store the trained model in a .pkl file

6. With flask implement a web server such that
	- it listens the requests at the port 6000
	- from the request should read in POST the variables `x` and `y` 
	- once read the variables, run the logistic regression model and return in  response a python dictionary with key `pred_y`  and value the predicted output of the logistic Regression



from flask import Flask, request, jsonify
import joblib
import numpy as np


app = Flask(__name__)

# Load the logistic regression model
model = joblib.load('ex2.pkl')

@app.route('/', methods=['POST'])
def predict():
    try:
        # Read `x` and `y` from the request
        data = request.get_json()
        x = data.get('x')
        y = data.get('y')
        # Prepare the data for prediction
        input_data = np.array([[x, y]])
        
        # Make a prediction
        pred_y = model.predict(input_data)[0].item()
        
        # Return the result in JSON format
        return jsonify({'pred_y': pred_y})
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(port=6000)

the other terminal : (base) nano@nano:~$ curl -X POST -d '{"x":4.54,"y":1.03}' -H "Content-Type: application/json" 127.0.0.1:6000
{"error":"Object of type int64 is not JSON serializable"}

current terminal : 127.0.0.1 - - [10/Dec/2021 07:23:27] "POST / HTTP/1.1" 200 -

